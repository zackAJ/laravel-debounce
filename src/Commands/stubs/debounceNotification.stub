<?php

namespace {{ namespace }};

use Carbon\Carbon;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Notifications\Messages\MailMessage;
use Zackaj\LaravelDebounce\DebounceNotification;

class {{ class }} extends DebounceNotification
{
    use Queueable;

    /**
     * Create a new notification instance.
     */
    public function __construct()
    {
        //
    }

    /**
     * Get the notification's delivery channels.
     *
     * @return array<int, string>
     */
    public function via(object $notifiable): array
    {
        return ['mail'];
    }

    /**
     * Get the mail representation of the notification.
     */
    public function toMail(object $notifiable): MailMessage
    {
        return (new MailMessage)
                    ->line('The introduction to the notification.')
                    ->action('Notification Action', url('/'))
                    ->line('Thank you for using our application!');
    }

    /**
     * Get the array representation of the notification.
     *
     * @return array<string, mixed>
     */
    public function toArray(object $notifiable): array
    {
        return [
            //
        ];
    }

    public function before($notifiables): void
    {
        //NOTE: remove the method if not needed
        //run before sending the notification
    }

    public function after($notifiables): void
    {
        //NOTE: remove the method if not needed
        //run after sending the notification
    }

    /**
     * @param  \Illuminate\Support\Collection|array|mixed  $notifiables
     */
    public function getLastActivityTimestamp(mixed $notifiables): ?Carbon
    {
        //NOTE: remove the method if not needed
        //manually set the last activity to debounce from

        return null;
    }
}
